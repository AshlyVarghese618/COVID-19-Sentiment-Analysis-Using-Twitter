"""Created on Oct 21 2020@author: ashlychinnuvarghese, tincythomas"""from ibm_watson import ToneAnalyzerV3# @UnresolvedImportfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticatorfrom dotenv import load_dotenvload_dotenv()import osclass CalculateSentiments:    def __init__(self):        self.__apikey = os.environ.get("apikey")        self.__url = os.environ.get("apiurl")        self.__authenticator = IAMAuthenticator(self.__apikey)        self.__toneAnalyser = ToneAnalyzerV3(version=os.environ.get("apiversion"), authenticator=self.__authenticator)        self.__toneAnalyser.set_service_url(self.__url)        self.__analyticScore = 0;        self.__tentativeScore = 0;        self.__confidentScore = 0;        self.__joyScore = 0;        self.__sadnessScore = 0;        self.__fearScore = 0;        self.__angerScore = 0;        self.__flag = False;        self.count = 1    def __tweetEmotion(self,tweet):        response = self.__toneAnalyser.tone(tweet,content_type='text/plain')        #json_object = json.dumps(response.result)        return response    def __calculateScores(self,response):        self.__analyticScore = 0;        self.__tentativeScore = 0;        self.__confidentScore = 0;        self.__joyScore = 0;        self.__sadnessScore = 0;        self.__fearScore = 0;        self.__angerScore = 0;        for row in response.result["document_tone"]["tones"]:            #print(row)                        if(row['tone_id']=='analytical'):                self.__analyticScore+=row['score']            if(row['tone_id']=='tentative'):                self.__tentativeScore+=row['score']            if(row['tone_id']=='confident'):                self.__confidentScore+=row['score']            if(row['tone_id']=='joy'):                self.__joyScore+=row['score']            if(row['tone_id']=='sadness'):                self.__sadnessScore+=row['score']            if(row['tone_id']=='fear'):                self.__fearScore+=row['score']            if(row['tone_id']=='anger'):                self.__angerScore+=row['score']        if(self.__analyticScore==0 and self.__tentativeScore==0 and self.__confidentScore==0 and                self.__joyScore==0 and self.__sadnessScore==0 and self.__fearScore==0 and self.__angerScore==0):            print('Inside sentences_tone')            self.__flag = True;            for row in response.result["sentences_tone"]:                self.count = self.count + 1                for tone in row['tones']:                    if(tone['tone_id']=='analytical'):                        self.__analyticScore+=tone['score']                    if(tone['tone_id']=='tentative'):                        self.__tentativeScore+=tone['score']                    if(tone['tone_id']=='confident'):                        self.__confidentScore+=tone['score']                    if(tone['tone_id']=='joy'):                        self.__joyScore+=tone['score']                    if(tone['tone_id']=='sadness'):                        self.__sadnessScore+=tone['score']                    if(tone['tone_id']=='fear'):                        self.__fearScore+=tone['score']                    if(tone['tone_id']=='anger'):                        self.__angerScore+=tone['score']        print(self.count)    def getScoresforTweets(self,location,tweet):        print('Inside getScoresforTweets')        data = {}        totalTweet = ''        for ind in tweet.index:            totalTweet += str(tweet['text'][ind])        #print(totalTweet)        response = self.__tweetEmotion(str(totalTweet).encode("utf-8"))        self.__calculateScores(response)        data =  {            "provinceName": location,            "analyticScore": round((self.__analyticScore*100)/ (self.count if self.__flag==True else 1) , 0),            "tentativeScore": round((self.__tentativeScore*100)/ (self.count if self.__flag==True else 1), 0),            "confidentScore": round((self.__confidentScore*100)/ (self.count if self.__flag==True else 1), 0),            "joyScore": round((self.__joyScore*100)/ (self.count if self.__flag==True else 1), 0),            "sadnessScore": round((self.__sadnessScore*100)/ (self.count if self.__flag==True else 1), 0),            "fearScore": round((self.__fearScore*100)/ (self.count if self.__flag==True else 1), 0),            "angerScore": round((self.__angerScore*100)/ (self.count if self.__flag==True else 1), 0)        }        print('Total tweets :',tweet.size)        print('EMOTIONAL ANALYSIS')        print('analyticScore :',round(self.__analyticScore*100, 0))        print('tentativeScore :',round(self.__tentativeScore*100, 0))        print('confidentScore :',round(self.__confidentScore*100, 0))        print('joyScore :',round(self.__joyScore*100, 0))        print('sadnessScore :',round(self.__sadnessScore*100, 0))        print('fearScore :',round(self.__fearScore*100, 0))        print('angerScore :',round(self.__angerScore*100, 0))        return  data    def getScoreForText(self,text):        data = {}        response = self.__tweetEmotion(str((text).encode("utf-8")))        self.__calculateScores(response)        data["text"] =  {            "type": text,            "analyticScore": round(self.__analyticScore*100, 0),            "tentativeScore": round(self.__tentativeScore*100, 0),            "confidentScore": round(self.__confidentScore*100, 0),            "joyScore": round(self.__joyScore*100, 0),            "sadnessScore": round(self.__sadnessScore*100, 0),            "fearScore": round(self.__fearScore*100, 0),            "angerScore": round(self.__angerScore*100, 0)        }        return data                                                